


ARM Macro Assembler    Page 1 


    1 00000000         ;*  os/os_cpu_a.s
    2 00000000         ;*
    3 00000000         ;*  Copyright (C) YYC
    4 00000000         ;*
    5 00000000         ;*  2012.4.9
    6 00000000         ;*
    7 00000000         ;*  u/cos-ii for Cortex-M3
    8 00000000         ;* 
    9 00000000         
   10 00000000         
   11 00000000                 IMPORT           OSRunning   ; External referenc
                                                            es
   12 00000000                 IMPORT           OSPrioCur
   13 00000000                 IMPORT           OSPrioHighRdy
   14 00000000                 IMPORT           OSTCBCur
   15 00000000                 IMPORT           OSTCBHighRdy
   16 00000000                 IMPORT           OSIntNesting
   17 00000000                 IMPORT           OSIntExit
   18 00000000                 IMPORT           OSTaskSwHook
   19 00000000                 IMPORT           OSInterrputSum
   20 00000000         
   21 00000000         
   22 00000000                 EXPORT           OSStartHighRdy
   23 00000000                 EXPORT           OSCtxSw
   24 00000000                 EXPORT           OSIntCtxSw
   25 00000000                 EXPORT           OS_ENTER_CRITICAL
   26 00000000                 EXPORT           OS_EXIT_CRITICAL
   27 00000000                 EXPORT           ItDisAll
   28 00000000         
   29 00000000                 EXPORT           OSPendSV
   30 00000000         
   31 00000000         
   32 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; ÖÐ¶Ï¿ØÖÆ¼Ä´æÆ÷
   33 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ; ÏµÍ³ÓÅÏÈ¼¶¼Ä´æÆ÷(
                                                            2)
   34 00000000 FFFF0000 
                       NVIC_PENDSV_PRI
                               EQU              0xFFFF0000  ; Èí¼þÖÐ¶ÏºÍÏµÍ³½ÚÅ
                                                            ÄÖÐ¶Ï
   35 00000000         ; (¶¼Îª×îµÍ£¬0xff).
   36 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; ´¥·¢Èí¼þÖÐ¶ÏµÄÖµ.
                                                            
   37 00000000         
   38 00000000         
   39 00000000                 PRESERVE8
   40 00000000         
   41 00000000                 AREA             |.text|, CODE, READONLY
   42 00000000                 THUMB
   43 00000000         
   44 00000000         
   45 00000000         ;½øÈëÁÙ½çÇø  
   46 00000000         OS_ENTER_CRITICAL
   47 00000000         



ARM Macro Assembler    Page 2 


   48 00000000 B672            CPSID            I           ; Disable all the i
                                                            nterrupts
   49 00000002         
   50 00000002 B406            PUSH             {R1,R2}
   51 00000004         
   52 00000004 492E            LDR              R1, =OSInterrputSum 
                                                            ; OSInterrputSum++
   53 00000006 780A            LDRB             R2, [R1]
   54 00000008 F102 0201       ADD              R2, R2, #1
   55 0000000C 700A            STRB             R2, [R1]
   56 0000000E BC06            POP              {R1,R2}
   57 00000010 4770            BX               LR
   58 00000012         
   59 00000012         
   60 00000012         ;ÍË³öÁÙ½çÇø 
   61 00000012         OS_EXIT_CRITICAL
   62 00000012 B406            PUSH             {R1, R2}
   63 00000014 492A            LDR              R1, =OSInterrputSum 
                                                            ; OSInterrputSum--
   64 00000016 780A            LDRB             R2, [R1]
   65 00000018 F1A2 0201       SUB              R2, R2, #1
   66 0000001C 700A            STRB             R2, [R1]
   67 0000001E F04F 0100       MOV              R1,  #0
   68 00000022 2A00            CMP              R2,  #0     ; if OSInterrputSum
                                                            =0,enable 
   69 00000024         ; interruptsÈç¹ûOSInterrputSum=0£¬
   70 00000024 F381 8810       MSREQ            PRIMASK, R1
   71 00000028 BC06            POP              {R1, R2}
   72 0000002A 4770            BX               LR
   73 0000002C         
   74 0000002C         
   75 0000002C         
   76 0000002C         ;Ê¹ÓÃµ÷¶ÈÆ÷ÔËÐÐµÚÒ»¸öÈÎÎñ 
   77 0000002C         OSStartHighRdy
   78 0000002C 4C25            LDR              R4, =NVIC_SYSPRI2 ; set the Pen
                                                            dSV exception prior
                                                            ity
   79 0000002E 4D26            LDR              R5, =NVIC_PENDSV_PRI
   80 00000030 6025            STR              R5, [R4]
   81 00000032         
   82 00000032 F04F 0400       MOV              R4, #0      ; set the PSP to 0 
                                                            for initial context
                                                             switch call
   83 00000036 F384 8809       MSR              PSP, R4
   84 0000003A         
   85 0000003A 4C24            LDR              R4, =OSRunning 
                                                            ; OSRunning = TRUE
   86 0000003C F04F 0501       MOV              R5, #1
   87 00000040 7025            STRB             R5, [R4]
   88 00000042         
   89 00000042         ;ÇÐ»»µ½×î¸ßÓÅÏÈ¼¶µÄÈÎÎñ
   90 00000042 4C23            LDR              R4, =NVIC_INT_CTRL ;rigger the 
                                                            PendSV exception (c
                                                            auses context switc
                                                            h)
   91 00000044 F04F 5580       LDR              R5, =NVIC_PENDSVSET
   92 00000048 6025            STR              R5, [R4]
   93 0000004A         
   94 0000004A B662            CPSIE            I           ;enable interrupts 



ARM Macro Assembler    Page 3 


                                                            at processor level
   95 0000004C         OSStartHang
   96 0000004C E7FE            B                OSStartHang ;should never get h
                                                            ere
   97 0000004E         
   98 0000004E         
   99 0000004E         
  100 0000004E         ;ÈÎÎñ¼¶ÉÏÏÂÎÄÇÐ»»           
  101 0000004E         OSCtxSw
  102 0000004E B430            PUSH             {R4, R5}
  103 00000050 4C1F            LDR              R4, =NVIC_INT_CTRL ;´¥·¢PendSVÒ
                                                            ì³£ (causes context
                                                             switch)
  104 00000052 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  105 00000056 6025            STR              R5, [R4]
  106 00000058 BC30            POP              {R4, R5}
  107 0000005A 4770            BX               LR
  108 0000005C         
  109 0000005C         
  110 0000005C         
  111 0000005C         ;ÖÐ¶Ï¼¶ÈÎÎñÇÐ»»
  112 0000005C         OSIntCtxSw
  113 0000005C B430            PUSH             {R4, R5}
  114 0000005E 4C1C            LDR              R4, =NVIC_INT_CTRL ;´¥·¢PendSVÒ
                                                            ì³£ (causes context
                                                             switch)
  115 00000060 F04F 5580       LDR              R5, =NVIC_PENDSVSET
  116 00000064 6025            STR              R5, [R4]
  117 00000066 BC30            POP              {R4, R5}
  118 00000068 4770            BX               LR
  119 0000006A BF00            NOP
  120 0000006C         
  121 0000006C         
  122 0000006C         ;OSPendSV is used to cause a context switch.
  123 0000006C         OSPendSV
  124 0000006C F3EF 8310       MRS              R3, PRIMASK
  125 00000070 B672            CPSID            I
  126 00000072         
  127 00000072 F3EF 8009       MRS              R0, PSP     ; PSP is process st
                                                            ack pointer
  128 00000076 B130            CBZ              R0, OSPendSV_nosave ; skip regi
                                                            ster save the first
                                                             time
  129 00000078         
  130 00000078 F1A0 0020       SUB              R0, R0, #0x20 ; save remaining 
                                                            regs r4-11 on proce
                                                            ss stack
  131 0000007C E880 0FF0       STM              R0, {R4-R11}
  132 00000080         
  133 00000080 4C14            LDR              R4, =OSTCBCur ; OSTCBCur->OSTCB
                                                            StkPtr = SP;
  134 00000082 6824            LDR              R4, [R4]
  135 00000084 6020            STR              R0, [R4]    ; R0 is SP of proce
                                                            ss being switched o
                                                            ut
  136 00000086         
  137 00000086         ; at this point, entire context of process has been save
                       d
  138 00000086         OSPendSV_nosave



ARM Macro Assembler    Page 4 


  139 00000086 B500            PUSH             {R14}       ; need to save LR e
                                                            xc_return value
  140 00000088 4813            LDR              R0, =OSTaskSwHook 
                                                            ; OSTaskSwHook();
  141 0000008A 4780            BLX              R0
  142 0000008C F85D EB04       POP              {R14}
  143 00000090         
  144 00000090 4C12            LDR              R4, =OSPrioCur ; OSPrioCur = OS
                                                            PrioHighRdy
  145 00000092 4D13            LDR              R5, =OSPrioHighRdy
  146 00000094 782E            LDRB             R6, [R5]
  147 00000096 7026            STRB             R6, [R4]
  148 00000098         
  149 00000098 4C0E            LDR              R4, =OSTCBCur ; OSTCBCur  = OST
                                                            CBHighRdy;
  150 0000009A 4E12            LDR              R6, =OSTCBHighRdy
  151 0000009C 6836            LDR              R6, [R6]
  152 0000009E 6026            STR              R6, [R4]
  153 000000A0         
  154 000000A0 6830            LDR              R0, [R6]    ; R0 is new process
                                                             SP; SP = OSTCBHigh
                                                            Rdy->OSTCBStkPtr;
  155 000000A2 E890 0FF0       LDM              R0, {R4-R11} ; restore r4-11 fr
                                                            om new process stac
                                                            k
  156 000000A6 F100 0020       ADD              R0, R0, #0x20
  157 000000AA F380 8809       MSR              PSP, R0     ; load PSP with new
                                                             process SP
  158 000000AE F04E 0E04       ORR              LR, LR, #0x04 ; ensure exceptio
                                                            n return uses proce
                                                            ss stack
  159 000000B2         
  160 000000B2 F383 8810       MSR              PRIMASK, R3
  161 000000B6 4770            BX               LR          ; exception return 
                                                            will restore remain
                                                            ing context
  162 000000B8         
  163 000000B8 BF00            NOP
  164 000000BA         
  165 000000BA         
  166 000000BA         
  167 000000BA         ;¹Ø±ÕÖÐ¶Ï¿ØÖÆÆ÷µÄËùÓÐÖÐ¶Ï.
  168 000000BA         ItDisAll
  169 000000BA B672            CPSID            I
  170 000000BC 4770            BX               LR
  171 000000BE         
  172 000000BE         
  173 000000BE 00 00           ALIGN
  174 000000C0         
  175 000000C0                 END
              00000000 
              E000ED20 
              FFFF0000 
              00000000 
              E000ED04 
              00000000 
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 5 


              00000000 
Command Line: --16 --debug --xref --cpu=Cortex-M3 --apcs=interwork --depend=..\
out\os_cpu_a.d -o..\out\os_cpu_a.o -IF:\Keil\ARM\RV31\INC -IF:\Keil\ARM\CMSIS\I
nclude -IF:\Keil\ARM\Inc\ST\STM32F10x --predefine="__MICROLIB SETA 1" --list=.\
List\os_cpu_a.lst ..\os\os_cpu_a.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 41 in file ..\os\os_cpu_a.s
   Uses
      None
Comment: .text unused
ItDisAll 000000BA

Symbol: ItDisAll
   Definitions
      At line 168 in file ..\os\os_cpu_a.s
   Uses
      At line 27 in file ..\os\os_cpu_a.s
Comment: ItDisAll used once
OSCtxSw 0000004E

Symbol: OSCtxSw
   Definitions
      At line 101 in file ..\os\os_cpu_a.s
   Uses
      At line 23 in file ..\os\os_cpu_a.s
Comment: OSCtxSw used once
OSIntCtxSw 0000005C

Symbol: OSIntCtxSw
   Definitions
      At line 112 in file ..\os\os_cpu_a.s
   Uses
      At line 24 in file ..\os\os_cpu_a.s
Comment: OSIntCtxSw used once
OSPendSV 0000006C

Symbol: OSPendSV
   Definitions
      At line 123 in file ..\os\os_cpu_a.s
   Uses
      At line 29 in file ..\os\os_cpu_a.s
Comment: OSPendSV used once
OSPendSV_nosave 00000086

Symbol: OSPendSV_nosave
   Definitions
      At line 138 in file ..\os\os_cpu_a.s
   Uses
      At line 128 in file ..\os\os_cpu_a.s
Comment: OSPendSV_nosave used once
OSStartHang 0000004C

Symbol: OSStartHang
   Definitions
      At line 95 in file ..\os\os_cpu_a.s
   Uses
      At line 96 in file ..\os\os_cpu_a.s
Comment: OSStartHang used once
OSStartHighRdy 0000002C

Symbol: OSStartHighRdy



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 77 in file ..\os\os_cpu_a.s
   Uses
      At line 22 in file ..\os\os_cpu_a.s
Comment: OSStartHighRdy used once
OS_ENTER_CRITICAL 00000000

Symbol: OS_ENTER_CRITICAL
   Definitions
      At line 46 in file ..\os\os_cpu_a.s
   Uses
      At line 25 in file ..\os\os_cpu_a.s
Comment: OS_ENTER_CRITICAL used once
OS_EXIT_CRITICAL 00000012

Symbol: OS_EXIT_CRITICAL
   Definitions
      At line 61 in file ..\os\os_cpu_a.s
   Uses
      At line 26 in file ..\os\os_cpu_a.s
Comment: OS_EXIT_CRITICAL used once
10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 32 in file ..\os\os_cpu_a.s
   Uses
      At line 90 in file ..\os\os_cpu_a.s
      At line 103 in file ..\os\os_cpu_a.s
      At line 114 in file ..\os\os_cpu_a.s

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 36 in file ..\os\os_cpu_a.s
   Uses
      At line 91 in file ..\os\os_cpu_a.s
      At line 104 in file ..\os\os_cpu_a.s
      At line 115 in file ..\os\os_cpu_a.s

NVIC_PENDSV_PRI FFFF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 34 in file ..\os\os_cpu_a.s
   Uses
      At line 79 in file ..\os\os_cpu_a.s
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 33 in file ..\os\os_cpu_a.s
   Uses
      At line 78 in file ..\os\os_cpu_a.s
Comment: NVIC_SYSPRI2 used once
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OSIntExit 00000000

Symbol: OSIntExit
   Definitions
      At line 17 in file ..\os\os_cpu_a.s
   Uses
      None
Comment: OSIntExit unused
OSIntNesting 00000000

Symbol: OSIntNesting
   Definitions
      At line 16 in file ..\os\os_cpu_a.s
   Uses
      None
Comment: OSIntNesting unused
OSInterrputSum 00000000

Symbol: OSInterrputSum
   Definitions
      At line 19 in file ..\os\os_cpu_a.s
   Uses
      At line 52 in file ..\os\os_cpu_a.s
      At line 63 in file ..\os\os_cpu_a.s

OSPrioCur 00000000

Symbol: OSPrioCur
   Definitions
      At line 12 in file ..\os\os_cpu_a.s
   Uses
      At line 144 in file ..\os\os_cpu_a.s
Comment: OSPrioCur used once
OSPrioHighRdy 00000000

Symbol: OSPrioHighRdy
   Definitions
      At line 13 in file ..\os\os_cpu_a.s
   Uses
      At line 145 in file ..\os\os_cpu_a.s
Comment: OSPrioHighRdy used once
OSRunning 00000000

Symbol: OSRunning
   Definitions
      At line 11 in file ..\os\os_cpu_a.s
   Uses
      At line 85 in file ..\os\os_cpu_a.s
Comment: OSRunning used once
OSTCBCur 00000000

Symbol: OSTCBCur
   Definitions
      At line 14 in file ..\os\os_cpu_a.s
   Uses
      At line 133 in file ..\os\os_cpu_a.s
      At line 149 in file ..\os\os_cpu_a.s

OSTCBHighRdy 00000000



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols


Symbol: OSTCBHighRdy
   Definitions
      At line 15 in file ..\os\os_cpu_a.s
   Uses
      At line 150 in file ..\os\os_cpu_a.s
Comment: OSTCBHighRdy used once
OSTaskSwHook 00000000

Symbol: OSTaskSwHook
   Definitions
      At line 18 in file ..\os\os_cpu_a.s
   Uses
      At line 140 in file ..\os\os_cpu_a.s
Comment: OSTaskSwHook used once
9 symbols
356 symbols in table
